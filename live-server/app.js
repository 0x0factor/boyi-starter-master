const express = require('express')
const { exec } = require('child_process');
const path = require('path');
const fs = require('fs')
const bodyParser = require('body-parser');
const { resolve } = require('path');

const app = express()
const port = Number(process.env.PORT || '3000')

// const isDev = process.env.NODE_ENV === 'dev'

// place to build sui2
buildDir = path.resolve(__dirname, '..')
console.log('buildDir', buildDir)

// place to get editor resources
editorDir = path.resolve(__dirname, 'editor/dist')

// place to store data generated by live-server
dataDir = process.env.DATA_DIR || 'data'
if (!path.isAbsolute(dataDir)) {
  path.resolve(dataDir)
}
dataFilePath = path.resolve(dataDir, 'data.json')
console.log('dataFilePath', dataFilePath)
outDir = path.resolve(dataDir, 'dist')

// functions

const buildStartpage = async (callback) => {
  const cmd = 'npm run build'
  const newEnv = {
    ...process.env,
    DATA_FILE: dataFilePath,
    OUT_DIR: outDir,
    NO_PWA: 1,
  }
  console.log(`* exec: ${cmd}`);
  return exec(cmd, {
    'cwd': buildDir,
    'env': newEnv,
  }, callback)
}

// start up check

if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir)
}

if (!fs.existsSync(dataFilePath)) {
  console.log('copy example file to DATA_DIR')
  fs.copyFileSync(path.resolve(buildDir, 'data.example.json'), dataFilePath)
}

if (!fs.existsSync(path.resolve(outDir, 'index.html'))) {
  console.log('run initial build')
  buildStartpage((err, stdout, stderr) => {
    if (err) {
      console.error('build failed:', err)
      return
    }
    console.log(`build result:
stdout=${stdout}
stderr=${stderr}`);
  })
}

// server code

app.use(bodyParser.text({type: 'text/plain'}))

app.get('/api/getData', (req, res) => {
  const data = fs.readFileSync(dataFilePath)
  res.setHeader('Content-Type', 'application/json')
  res.send(data)
})

app.post('/api/updateDataFile', (req, res) => {
  rawBody = req.body
  try {
    JSON.parse(rawBody)
  } catch(e) {
    console.log('rawBody')
    console.log(rawBody)
    res.status(400).send(`JSON parse error: ${e}`)
    return
  }

  // save to data dir
  fs.writeFileSync(dataFilePath, rawBody)
  res.send(JSON.stringify({ok: 1}))
})


app.post('/api/build', async (req, res) => {
  buildStartpage((err, stdout, stderr) => {
    if (err) {
      const errMsg = `Error: ${err}`
      console.warn(errMsg);
      res.status(500).send(errMsg);
      return
    }

    console.log(stdout);
    res.send(`Success
stdout: ${stdout}
stderr: ${stderr}`);
  })
})

app.use('/', express.static(outDir))

// /preview also serves the outDir, so that it could be proxies from vite dev server
app.use('/preview', express.static(outDir))

app.use('/editor', express.static(editorDir))

app.listen(port, () => {
  console.log(`live-server app listening on port ${port}`)
})
